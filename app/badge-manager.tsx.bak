import React, { useState, useEffect } from 'react';
import { StyleSheet, View, Text, TouchableOpacity, ScrollView, TextInput, ActivityIndicator } from 'react-native';
import { useTheme } from '@/context/ThemeContext';
import { useGamification } from '@/context/GamificationContext';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { useRouter } from 'expo-router';
import { ArrowLeft, Award, Check, ChevronRight } from 'lucide-react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Achievement } from '@/types/gamification';

interface BadgesByCategory {
  [category: string]: Achievement[];
}

export default function BadgeManagerScreen() {
  const { colors } = useTheme();
  const router = useRouter();
  const { 
    streak, 
    setStreak, 
    achievements, 
    forceCheckStreakAchievements,
    addJournalEntry,
    logMeditation,
    logWorkout 
  } = useGamification();
  
  const [customStreakValue, setCustomStreakValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  // Count unlocked and total badges
  const unlockedBadges = achievements ? achievements.filter(badge => badge.unlocked).length : 0;
  const totalBadges = achievements ? achievements.length : 0;
  
  // Group badges by category
  const badgesByCategory: BadgesByCategory = achievements ? achievements.reduce((acc: BadgesByCategory, badge) => {
    if (!acc[badge.category]) {
      acc[badge.category] = [];
    }
    acc[badge.category].push(badge);
    return acc;
  }, {}) : {};
  
  const applyCustomStreak = async () => {
    const value = parseInt(customStreakValue, 10);
    if (isNaN(value) || value < 0) {
      // Invalid input
      return;
    }
    
    setIsLoading(true);
    try {
      await setStreak(value);
      await forceCheckStreakAchievements();
    } catch (error) {
      console.error('Error setting streak:', error);
    } finally {
      setIsLoading(false);
    }
  };
  
  const applyPresetStreak = async (days: number) => {
    setIsLoading(true);
    try {
      await setStreak(days);
      await forceCheckStreakAchievements();
    } catch (error) {
      console.error('Error setting preset streak:', error);
    } finally {
      setIsLoading(false);
    }
  };
  
  const checkAllAchievements = async () => {
    setIsLoading(true);
    try {
      await forceCheckStreakAchievements();
    } catch (error) {
      console.error('Error checking achievements:', error);
    } finally {
      setIsLoading(false);
    }
  };
  
  const unlockJournalAchievements = async () => {
    setIsLoading(true);
    try {
      // Add sample journal entries to unlock journal badges
      for (let i = 0; i < 5; i++) {
        await addJournalEntry(`Test journal entry ${i + 1} for badge testing`);
      }
      await forceCheckStreakAchievements();
    } catch (error) {
      console.error('Error unlocking journal achievements:', error);
    } finally {
      setIsLoading(false);
    }
  };
  
  const unlockMeditationAchievements = async () => {
    setIsLoading(true);
    try {
      // Log multiple meditation sessions
      for (let i = 0; i < 10; i++) {
        logMeditation(10);
      }
      await forceCheckStreakAchievements();
    } catch (error) {
      console.error('Error unlocking meditation achievements:', error);
    } finally {
      setIsLoading(false);
    }
  };
  
  const unlockWorkoutAchievements = async () => {
    setIsLoading(true);
    try {
      // Log multiple workout sessions
      for (let i = 0; i < 10; i++) {
        logWorkout(30);
      }
      await forceCheckStreakAchievements();
    } catch (error) {
      console.error('Error unlocking workout achievements:', error);
    } finally {
      setIsLoading(false);
    }
  };
  
  const unlockMultipleBadges = async (count: number) => {
    setIsLoading(true);
    try {
      if (count >= 5) {
        // Set streak to 5 days to unlock early streak badges
        await setStreak(5);
        
        // Add journal entries
        for (let i = 0; i < 3; i++) {
          await addJournalEntry(`Test journal entry ${i + 1} for badge testing`);
        }
        
        // Log some meditation and workout sessions
        for (let i = 0; i < 3; i++) {
          logMeditation(10);
          logWorkout(20);
        }
      }
      
      if (count >= 10) {
        // Set streak to 14 days to unlock more streak badges
        await setStreak(14);
        
        // Add more journal entries
        for (let i = 0; i < 5; i++) {
          await addJournalEntry(`Additional journal entry ${i + 1} for badge testing`);
        }
        
        // Log more meditation and workout sessions
        for (let i = 0; i < 5; i++) {
          logMeditation(15);
          logWorkout(30);
        }
      }
      
      // Force check all achievements
      await forceCheckStreakAchievements();
    } catch (error) {
      console.error('Error unlocking multiple badges:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      <StatusBar style="light" />
      
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <ArrowLeft size={24} color={colors.text} />
        </TouchableOpacity>
        <Text style={[styles.headerTitle, { color: colors.text }]}>Badge Manager</Text>
      </View>
      
      <ScrollView style={styles.content}>
        {/* Progress Overview */}
        <View style={[styles.card, { backgroundColor: colors.card }]}>
          <View style={styles.badgeProgressRow}>
            <Award size={28} color={colors.primary} />
            <Text style={[styles.badgeProgressText, { color: colors.text }]}>
              {unlockedBadges}/{totalBadges} badges unlocked
            </Text>
          </View>
          
          <View style={styles.progressBarContainer}>
            <View style={[styles.progressBarBackground, { backgroundColor: colors.border }]}>
              <LinearGradient
                colors={['#6772FF', '#9265FF']}
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 0 }}
                style={[
                  styles.progressBarFill,
                  { width: `${(unlockedBadges / totalBadges) * 100}%` }
                ]}
              />
            </View>
          </View>
          
          <Text style={[styles.badgeProgressCaption, { color: colors.secondary }]}>
            {totalBadges - unlockedBadges} badges remaining to unlock
          </Text>
        </View>
        
        {/* Quick Unlock for Companion Evolution */}
        <View style={[styles.card, { backgroundColor: colors.card }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>Quick Evolution Unlock</Text>
          <Text style={[styles.sectionDescription, { color: colors.secondary }]}>
            Quickly unlock multiple badges to evolve your companion:
          </Text>
          
          <View style={styles.quickUnlockButtons}>
            <TouchableOpacity 
              style={[styles.evolutionButton, { backgroundColor: '#4CAF50' }]}
              onPress={() => unlockMultipleBadges(5)}
              disabled={isLoading}
            >
              <View style={styles.evolutionButtonContent}>
                <Text style={styles.evolutionButtonTitle}>Stage 2 Evolution</Text>
                <Text style={styles.evolutionButtonDescription}>Unlock 5+ badges</Text>
              </View>
              {isLoading ? (
                <ActivityIndicator size="small" color="#FFFFFF" />
              ) : (
                <ChevronRight size={20} color="#FFFFFF" />
              )}
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={[styles.evolutionButton, { backgroundColor: '#673AB7' }]}
              onPress={() => unlockMultipleBadges(10)}
              disabled={isLoading}
            >
              <View style={styles.evolutionButtonContent}>
                <Text style={styles.evolutionButtonTitle}>Final Evolution</Text>
                <Text style={styles.evolutionButtonDescription}>Unlock 10+ badges</Text>
              </View>
              {isLoading ? (
                <ActivityIndicator size="small" color="#FFFFFF" />
              ) : (
                <ChevronRight size={20} color="#FFFFFF" />
              )}
            </TouchableOpacity>
          </View>
        </View>
        
        {/* Current Streak */}
        <View style={[styles.card, { backgroundColor: colors.card }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>Current Streak</Text>
          <Text style={[styles.streakValue, { color: colors.primary }]}>{streak} days</Text>
        </View>
        
        {/* Set Custom Streak */}
        <View style={[styles.card, { backgroundColor: colors.card }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>Set Custom Streak</Text>
          
          <View style={styles.customStreakRow}>
            <TextInput
              style={[styles.streakInput, { 
                color: colors.text,
                borderColor: colors.border,
                backgroundColor: colors.background
              }]}
              value={customStreakValue}
              onChangeText={setCustomStreakValue}
              placeholder="Enter days"
              placeholderTextColor={colors.secondary}
              keyboardType="number-pad"
            />
            <TouchableOpacity 
              style={[styles.applyButton, { backgroundColor: colors.primary }]}
              onPress={applyCustomStreak}
              disabled={isLoading}
            >
              {isLoading ? (
                <ActivityIndicator size="small" color="#FFFFFF" />
              ) : (
                <Text style={styles.applyButtonText}>Apply</Text>
              )}
            </TouchableOpacity>
          </View>
        </View>
        
        {/* Quick Streak Presets */}
        <View style={[styles.card, { backgroundColor: colors.card }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>Quick Streak Presets</Text>
          
          <View style={styles.presetButtonsContainer}>
            <TouchableOpacity 
              style={[styles.presetButton, { backgroundColor: colors.primary + '20' }]}
              onPress={() => applyPresetStreak(1)}
              disabled={isLoading}
            >
              <Text style={[styles.presetButtonText, { color: colors.primary }]}>1 Day</Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={[styles.presetButton, { backgroundColor: colors.primary + '20' }]}
              onPress={() => applyPresetStreak(3)}
              disabled={isLoading}
            >
              <Text style={[styles.presetButtonText, { color: colors.primary }]}>3 Days</Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={[styles.presetButton, { backgroundColor: colors.primary + '20' }]}
              onPress={() => applyPresetStreak(5)}
              disabled={isLoading}
            >
              <Text style={[styles.presetButtonText, { color: colors.primary }]}>5 Days</Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={[styles.presetButton, { backgroundColor: colors.primary + '20' }]}
              onPress={() => applyPresetStreak(7)}
              disabled={isLoading}
            >
              <Text style={[styles.presetButtonText, { color: colors.primary }]}>7 Days</Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={[styles.presetButton, { backgroundColor: colors.primary + '20' }]}
              onPress={() => applyPresetStreak(14)}
              disabled={isLoading}
            >
              <Text style={[styles.presetButtonText, { color: colors.primary }]}>14 Days</Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={[styles.presetButton, { backgroundColor: colors.primary + '20' }]}
              onPress={() => applyPresetStreak(30)}
              disabled={isLoading}
            >
              <Text style={[styles.presetButtonText, { color: colors.primary }]}>30 Days</Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={[styles.presetButton, { backgroundColor: colors.primary + '20' }]}
              onPress={() => applyPresetStreak(90)}
              disabled={isLoading}
            >
              <Text style={[styles.presetButtonText, { color: colors.primary }]}>90 Days</Text>
            </TouchableOpacity>
          </View>
        </View>
        
        {/* Quick Actions */}
        <View style={[styles.card, { backgroundColor: colors.card }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>Quick Actions</Text>
          
          <TouchableOpacity 
            style={[styles.actionButton, { backgroundColor: colors.primary }]}
            onPress={checkAllAchievements}
            disabled={isLoading}
          >
            <Text style={styles.actionButtonText}>Force Check All Achievements</Text>
            <ChevronRight size={20} color="#FFFFFF" />
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[styles.actionButton, { backgroundColor: '#4CAF50' }]}
            onPress={unlockJournalAchievements}
            disabled={isLoading}
          >
            <Text style={styles.actionButtonText}>Unlock Journal Achievements</Text>
            <ChevronRight size={20} color="#FFFFFF" />
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[styles.actionButton, { backgroundColor: '#2196F3' }]}
            onPress={unlockMeditationAchievements}
            disabled={isLoading}
          >
            <Text style={styles.actionButtonText}>Unlock Meditation Achievements</Text>
            <ChevronRight size={20} color="#FFFFFF" />
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[styles.actionButton, { backgroundColor: '#FF9800' }]}
            onPress={unlockWorkoutAchievements}
            disabled={isLoading}
          >
            <Text style={styles.actionButtonText}>Unlock Workout Achievements</Text>
            <ChevronRight size={20} color="#FFFFFF" />
          </TouchableOpacity>
        </View>
        
        {/* Badge Categories */}
        <View style={[styles.card, { backgroundColor: colors.card }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>Badge Categories</Text>
          
          {Object.keys(badgesByCategory).map((category) => {
            const badges = badgesByCategory[category];
            const categoryUnlocked = badges.filter(badge => badge.unlocked).length;
            
            return (
              <View key={category} style={styles.categoryItem}>
                <View style={styles.categoryHeader}>
                  <Text style={[styles.categoryName, { color: colors.text }]}>
                    {category.charAt(0).toUpperCase() + category.slice(1)}
                  </Text>
                  <Text style={[styles.categoryCount, { color: colors.secondary }]}>
                    {categoryUnlocked}/{badges.length}
                  </Text>
                </View>
                
                <View style={styles.categoryBadges}>
                  {badges.map((badge: Achievement) => (
                    <View 
                      key={badge.id} 
                      style={[
                        styles.badgeItem,
                        badge.unlocked ? { backgroundColor: colors.primary + '20' } : { backgroundColor: colors.border + '50' }
                      ]}
                    >
                      {badge.unlocked && (
                        <View style={styles.badgeUnlockedIcon}>
                          <Check size={12} color="#FFFFFF" />
                        </View>
                      )}
                      <Text 
                        style={[
                          styles.badgeName,
                          badge.unlocked ? { color: colors.primary } : { color: colors.secondary }
                        ]}
                        numberOfLines={1}
                      >
                        {badge.name}
                      </Text>
                    </View>
                  ))}
                </View>
              </View>
            );
          })}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.1)',
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginLeft: 12,
  },
  content: {
    flex: 1,
    padding: 16,
  },
  card: {
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 12,
  },
  badgeProgressRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  badgeProgressText: {
    fontSize: 18,
    fontWeight: 'bold',
    marginLeft: 12,
  },
  progressBarContainer: {
    height: 12,
    borderRadius: 6,
    overflow: 'hidden',
    marginBottom: 8,
  },
  progressBarBackground: {
    height: '100%',
    width: '100%',
  },
  progressBarFill: {
    height: '100%',
    borderRadius: 6,
  },
  badgeProgressCaption: {
    fontSize: 14,
    textAlign: 'right',
  },
  streakValue: {
    fontSize: 48,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  customStreakRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  streakInput: {
    flex: 1,
    height: 50,
    borderWidth: 1,
    borderRadius: 8,
    paddingHorizontal: 16,
    fontSize: 16,
    marginRight: 12,
  },
  applyButton: {
    height: 50,
    paddingHorizontal: 24,
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  applyButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  presetButtonsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginHorizontal: -4,
  },
  presetButton: {
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    margin: 4,
  },
  presetButtonText: {
    fontWeight: '600',
    fontSize: 14,
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    height: 50,
    borderRadius: 8,
    paddingHorizontal: 16,
    marginBottom: 10,
  },
  actionButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  categoryItem: {
    marginBottom: 16,
  },
  categoryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  categoryName: {
    fontSize: 16,
    fontWeight: '600',
  },
  categoryCount: {
    fontSize: 14,
  },
  categoryBadges: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginHorizontal: -4,
  },
  badgeItem: {
    padding: 8,
    borderRadius: 20,
    margin: 4,
    flexDirection: 'row',
    alignItems: 'center',
  },
  badgeUnlockedIcon: {
    width: 16,
    height: 16,
    borderRadius: 8,
    backgroundColor: '#4CAF50',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 6,
  },
  badgeName: {
    fontSize: 12,
    fontWeight: '600',
    maxWidth: 120,
  },
  sectionDescription: {
    fontSize: 14,
    marginBottom: 16,
  },
  quickUnlockButtons: {
    gap: 12,
  },
  evolutionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    borderRadius: 12,
    marginBottom: 8,
  },
  evolutionButtonContent: {
    flex: 1,
  },
  evolutionButtonTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  evolutionButtonDescription: {
    fontSize: 12,
    color: 'rgba(255,255,255,0.8)',
  },
}); 