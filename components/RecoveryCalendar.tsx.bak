import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
} from 'react-native';
import { useStreak } from '@/context/StreakContext';
import { format, addMonths, subMonths, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay } from 'date-fns';

export default function RecoveryCalendar() {
  const { calendarHistory, streakStartDate } = useStreak();
  const [currentMonth, setCurrentMonth] = useState(new Date());
  
  // Navigate to previous month
  const goToPreviousMonth = () => {
    setCurrentMonth(prevMonth => subMonths(prevMonth, 1));
  };

  // Navigate to next month
  const goToNextMonth = () => {
    setCurrentMonth(prevMonth => addMonths(prevMonth, 1));
  };

  // Get days in the current month
  const getDaysInMonth = () => {
    const start = startOfMonth(currentMonth);
    const end = endOfMonth(currentMonth);
    return eachDayOfInterval({ start, end });
  };

  // Get day status (clean or relapse)
  const getDayStatus = (date: Date) => {
    const dateStr = format(date, 'yyyy-MM-dd');
    return calendarHistory[dateStr] || null;
  };

  // Render the calendar
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Recovery Calendar</Text>
      
      {/* Month navigation */}
      <View style={styles.monthNavigation}>
        <TouchableOpacity onPress={goToPreviousMonth} style={styles.navButton}>
          <Text style={styles.navButtonText}>{'<'}</Text>
        </TouchableOpacity>
        
        <Text style={styles.monthTitle}>
          {format(currentMonth, 'MMMM yyyy')}
        </Text>
        
        <TouchableOpacity onPress={goToNextMonth} style={styles.navButton}>
          <Text style={styles.navButtonText}>{'>'}</Text>
        </TouchableOpacity>
      </View>
      
      {/* Day headers */}
      <View style={styles.weekDays}>
        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
          <Text key={day} style={styles.weekDayText}>{day}</Text>
        ))}
      </View>
      
      {/* Calendar days */}
      <ScrollView contentContainerStyle={styles.daysContainer}>
        {getDaysInMonth().map(date => {
          const status = getDayStatus(date);
          const isToday = isSameDay(date, new Date());
          
          return (
            <View
              key={date.toString()}
              style={[
                styles.dayCircle,
                status === 'clean' && styles.cleanDay,
                status === 'relapse' && styles.relapseDay,
                isToday && styles.todayCircle,
                !isSameMonth(date, currentMonth) && styles.outsideMonthDay,
              ]}
            >
              <Text style={[
                styles.dayText,
                status === 'relapse' && styles.relapseDayText,
                isToday && styles.todayText,
              ]}>
                {format(date, 'd')}
              </Text>
            </View>
          );
        })}
      </ScrollView>
      
      {/* Legend */}
      <View style={styles.legend}>
        <View style={styles.legendItem}>
          <View style={[styles.legendCircle, styles.cleanDay]} />
          <Text style={styles.legendText}>Clean Day</Text>
        </View>
        
        <View style={styles.legendItem}>
          <View style={[styles.legendCircle, styles.relapseDay]} />
          <Text style={styles.legendText}>Relapse Day</Text>
        </View>
      </View>
      
      {/* Inspirational quote */}
      <View style={styles.quoteContainer}>
        <Text style={styles.quoteText}>
          "The greatest glory in living lies not in never falling, but in rising every time we fall."
        </Text>
        <Text style={styles.tapText}>TAP FOR MORE INSPIRATION</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#121212',
    padding: 16,
    borderRadius: 12,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 16,
    textAlign: 'center',
  },
  monthNavigation: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  navButton: {
    padding: 8,
  },
  navButtonText: {
    fontSize: 20,
    color: '#FFFFFF',
    fontWeight: 'bold',
  },
  monthTitle: {
    fontSize: 18,
    color: '#FFFFFF',
    fontWeight: 'bold',
  },
  weekDays: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 8,
  },
  weekDayText: {
    color: '#FFFFFF',
    fontWeight: '500',
  },
  daysContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    paddingBottom: 8,
  },
  dayCircle: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    margin: 4,
    backgroundColor: '#333333',
  },
  cleanDay: {
    backgroundColor: '#4CAF50',
  },
  relapseDay: {
    backgroundColor: '#F44336',
  },
  todayCircle: {
    borderWidth: 2,
    borderColor: '#FFFFFF',
  },
  outsideMonthDay: {
    opacity: 0.3,
  },
  dayText: {
    color: '#FFFFFF',
    fontWeight: '500',
  },
  relapseDayText: {
    color: '#FFFFFF',
  },
  todayText: {
    fontWeight: 'bold',
  },
  legend: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 16,
  },
  legendItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginHorizontal: 12,
  },
  legendCircle: {
    width: 16,
    height: 16,
    borderRadius: 8,
    marginRight: 8,
  },
  legendText: {
    color: '#FFFFFF',
    fontSize: 14,
  },
  quoteContainer: {
    marginTop: 24,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255,255,255,0.1)',
    alignItems: 'center',
  },
  quoteText: {
    color: '#AAAAAA',
    fontStyle: 'italic',
    textAlign: 'center',
    paddingHorizontal: 16,
    marginBottom: 8,
  },
  tapText: {
    color: '#666666',
    fontSize: 12,
    marginTop: 8,
  },
}); 